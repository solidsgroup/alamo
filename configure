#!/usr/bin/env python3
import argparse
import os
import re
import subprocess
import textwrap
import sys
import ctypes.util
import glob

python_version = str(sys.version_info.major) + "." + str(sys.version_info.minor)

class color:
    reset = "\033[0m"
    red   = "\033[31m"
    green   = "\033[32m"
    lightgray = "\033[37m"
    boldgray = "\033[1m\033[37m"
    boldgreen   = "\033[1m\033[32m"
    boldyellow   = "\033[1m\033[33m"
    boldred   = "\033[1m\033[31m"

    bggray = "\033[47m\033[30m"

width = 20
def wrap(input_string):
    pre = ""
    wrapper = textwrap.TextWrapper(width=70,)
    for line in wrapper.wrap(input_string):
        if line != "\n":
            print(pre + line)
            pre = "".ljust(width)
def message(title,message="",wrap_message=True):
    print(color.boldgreen + title.ljust(width) + color.reset,end="")
    if wrap_message: wrap(message)
    else: print(message)
def shellmessage(title,cmd):
    print(color.boldgreen + title.ljust(width) + color.reset,end="")
    wrap(subprocess.check_output(cmd.split(' '),stderr=subprocess.STDOUT).decode('ascii').replace('\n',' '))
def warning(message):
    print(color.boldyellow + "WARNING".ljust(width) + color.reset,end="")
    wrap(message)
def error(message):
    print(color.boldred + "ERROR".ljust(width) + color.reset,end="")
    wrap(message)
def code(code):
    return(color.green + code + color.reset);
def note(message):
    print(color.boldgray + "NOTE".ljust(width) + color.reset,end="")
    wrap(message)

parser = argparse.ArgumentParser(description='Configure ALAMO');
parser.add_argument('--dim', default=3, type=int, help='Spatial dimension [3]')
parser.add_argument('--comp', default="g++", help='Compiler. Options: [g++], clang++, icc')
parser.add_argument('--amrex', default="", help='Path to AMReX installation []')
parser.add_argument('--build-amrex', dest="buildamrex",action='store_true',default=True, help='Download and build AMReX automatically')
parser.add_argument('--build-amrex-branch',dest="buildamrexbranch",default="master", help='AMReX Branch (You probably don\'t need to change this!' )
parser.add_argument('--build-amrex-tag',dest="buildamrextag",default="20.02", help='AMReX Branch (You probably don\'t need to change this!' )
parser.add_argument('--eigen', default="", help='Path to Eigen installation []')
parser.add_argument('--get-eigen', dest="geteigen",action='store_true',default=False, help='Download Eigen automatically')
parser.add_argument('--debug', dest='debug', action='store_true', help='Compile in debug mode')
parser.add_argument('--no-debug', dest='debug', action='store_false', help='[Compile in production mode]')
parser.add_argument('--offline', dest='offline', action='store_true',default=False, help='[Compile in production mode]')
parser.add_argument('--omp', dest='omp', action='store_true',default=False, help='Compile with OpenMP')
parser.add_argument('--python',dest='python',nargs='?',const=python_version,help='Compile python interface library')
parser.add_argument('--docs',dest='docs',action='store_true',help='Check installation of packages for building documentation')
parser.add_argument('--no-diff',dest='diff',default=True,action='store_false',help='Suppress using diff2html to generate git diff reports')
parser.add_argument('--profile',dest='profile',action='store_true',default=False,help="Enable tiny profiling in AMReX")
parser.set_defaults(debug=False)
args=parser.parse_args()

fpic = args.python 

f = open("Makefile.pre.conf","w")
f2 = open("Makefile.post.conf","w")

#
# Specify Postfix
#
postfix = ""
postfix += str(args.dim)+"d"
if args.debug: postfix += "-debug"
if fpic: postfix += "-fpic"
if args.profile: postfix += "-profile"
postfix += "-" + args.comp
f.write("POSTFIX = " + postfix + '\n')

#
# Current Repo settings
#
shellmessage("Current Branch", "git rev-parse --abbrev-ref HEAD")
shellmessage("Current Hash",   "git log -1 --pretty=format:%H")

#
# DIMENSION
#
f.write("DIM = " + str(args.dim) + "\n")
message("Dimension",str(args.dim))

#
# COMPILER
#

#
# DEBUG
#
f.write("DEBUG = " + str(args.debug) + "\n")
message("Debug Mode",str(args.debug))

#
# OpenMP
#
message("OpenMP",str(args.omp))
if args.omp:
    f.write("CXX_COMPILE_FLAGS += -DOMP -fopenmp \n")
    f.write("LINKER_FLAGS += -lgomp \n")

#
# AMREX
#
if (args.buildamrex == True):
    amrex_configure = './configure '
    amrex_configure += ' --dim=' + str(args.dim)
    amrex_configure += ' --prefix=' + postfix
    if   args.comp == "g++":     amrex_configure += ' --comp=gnu'
    elif args.comp == "clang++": amrex_configure += ' --comp=llvm'
    elif args.comp == "icc":     amrex_configure += ' --comp=intel'
    if args.debug: amrex_configure += ' --debug=yes'
    if fpic: amrex_configure += ' --enable-pic=yes'
    if args.profile: amrex_configure += ' --enable-tiny-profile=yes'
    args.amrex = "amrex/"+postfix
    f.write("AMREX = amrex/" + postfix + "/\n")
    f.write("AMREX_TARGET = amrex/" + postfix + "\n")
    
    if os.path.isdir("amrex"):
        if not args.offline:
            message("AMReX-Checkout","Checking out branch " + args.buildamrexbranch,False)
            p = subprocess.Popen(("git -C amrex checkout "+args.buildamrexbranch).split(),stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            for line in iter(p.stderr.readline,b''): print (''.ljust(width)+ ">>> " + line.decode('ascii').replace('\n',''))
            for line in iter(p.stdout.readline,b''): print (''.ljust(width)+ ">>> " + line.decode('ascii').replace('\n',''))
            message("AMReX-Update","Updating branch " + args.buildamrexbranch,False)
            p = subprocess.Popen("git -C amrex pull".split(),stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            for line in iter(p.stderr.readline,b''): print (''.ljust(width)+ ">>> " + line.decode('ascii').replace('\n',''))
            for line in iter(p.stdout.readline,b''): print (''.ljust(width)+ ">>> " + line.decode('ascii').replace('\n',''))
            p = subprocess.Popen(("git -C amrex checkout "+args.buildamrextag).split(),stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            for line in iter(p.stderr.readline,b''): print (''.ljust(width)+ ">>> " + line.decode('ascii').replace('\n',''))
            for line in iter(p.stdout.readline,b''): print (''.ljust(width)+ ">>> " + line.decode('ascii').replace('\n',''))
        else:
            message("AMReX","In offline mode, using existing version of AMReX")
    else:
        if args.offline:
            raise Exception(error() + "Cannot download AMReX and no version currently exists!")
        message("AMReX-Clone","Cloning AMReX branch " + args.buildamrexbranch + " -- This may take a while",True)
        p = subprocess.Popen(("git clone https://github.com/AMReX-Codes/amrex.git --branch " + args.buildamrexbranch).split(),
                             stderr=subprocess.PIPE,stdout=subprocess.PIPE)
        for line in iter(p.stderr.readline,b''): print (''.ljust(width)+ ">>> " + line.decode('ascii').replace('\n',''))
        for line in iter(p.stdout.readline,b''): print (''.ljust(width)+ ">>> " + line.decode('ascii').replace('\n',''))
    
    message("AMReX-Configure",amrex_configure,False)
    subprocess.Popen(amrex_configure.split(),cwd="amrex")
    
    f2.write("amrex/"+postfix+":\n")
    f2.write("\t$(MAKE) -C amrex $(MAKECMD)\n") # --output-sync=target
    f2.write("\tmake -C amrex install\n")
        
    if not args.offline:
        message("AMReX-Status", "Downloading/building automatically")
    else:        
        message("AMReX-Status", "Using pre-downloaded version")
    message("AMReX-Directory", "amrex/"+postfix)

elif (args.amrex != ""):
    # Check to make sure directory is valid 
    if not (os.path.isdir(args.amrex + "/include") and os.path.isdir(args.amrex + "/lib")):
        raise Exception(error()+" AMReX directory must contain include/ and lib/ subdirectories ")

    # Scan AMReX Config File
    amrex_spacedim = 0
    amrex_profiling = False
    amrex_debug = False
    amrex_omp = False
    for line in open(args.amrex + "/include/AMReX_Config.H"):
        if "define BL_SPACEDIM 1" in line or "define AMREX_SPACEDIM 1" in line: amrex_spacedim = 1
        if "define BL_SPACEDIM 2" in line or "define AMREX_SPACEDIM 2" in line: amrex_spacedim = 2
        if "define BL_SPACEDIM 3" in line or "define AMREX_SPACEDIM 3" in line: amrex_spacedim = 3
        if "AMREX_DEBUG 1" in line: amrex_debug = True
        if "USE_OMP 1" in line: amrex_omp = True
        if "PROFILING 1" in line: amrex_profiling = True
        if "AMREX_GIT_VERSION" in line: githash = line.replace("#define AMREX_GIT_VERSION ","").replace('"','').replace('\n','')
        
    if args.dim != amrex_spacedim:
        raise Exception(error()+"AMReX was compiled using a different spatial dimension (AMREX_SPACEDIM="+str(amrex_spacedim)+")")
    if args.debug != amrex_debug:
        if args.debug:
            raise Exception(error()+"Alamo is in debug mode but AMReX is not")
        else:
            raise Exception(error()+": Alamo is not in debug mode but AMReX is")
    if not args.debug and amrex_profiling:
        warning("Alamo compiled in production mode, but PROFILE is enabled in AMReX")
    if args.omp and not amrex_omp:
        raise Exception(error() + "Alamo is compiled with OMP but AMReX is not. Try compiling AMReX with "+code("./configure --with-omp=yes") + " or compile Alamo without "+code("--omp"))
    if not args.omp and amrex_omp:
        raise Exception(error() + "Alamo is compiled without OMP but AMReX is. Try compiling AMReX with "+code("./configure --with-omp=no") + " or compile Alamo with " + code("--omp"))

    message("AMReX Directory", args.amrex)
    message("AMReX Git commit", githash)
    f.write("AMREX = " + args.amrex + "\n")
else:
    warning("AMReX path not specified. This may cause compile errors.")

#
# EIGEN
#
if (args.geteigen):
    if not os.path.isdir("eigen3"):
        message("Eigen-Clone","Cloning Eigen -- This may take a few moments",True)
        p = subprocess.Popen(("git clone https://github.com/eigenteam/eigen-git-mirror").split(),
                             stderr=subprocess.PIPE,stdout=subprocess.PIPE)
        for line in iter(p.stderr.readline,b''): print (''.ljust(width)+ ">>> " + line.decode('ascii').replace('\n',''))
        for line in iter(p.stdout.readline,b''): print (''.ljust(width)+ ">>> " + line.decode('ascii').replace('\n',''))
        subprocess.run("mv eigen-git-mirror eigen3".split())
    message("Eigen-Directory",".")
    f.write("EIGEN = .\n")
elif (args.eigen != ""):
    if not os.path.isdir(args.eigen + "/eigen3"):
        raise Exception(color.red+"ERROR"+color.reset+": Eigen directory must contain eigen3 subdirectory")
    message("Eigen-Directory",args.eigen)
    f.write("EIGEN = " + args.eigen + "\n")

#
# Compiler
#

if not args.comp in ['g++','icc','clang++']:
    raise Exception(color.red + "ERROR" + color.reset + ": Compiler must be g++, clang++, or icc")
if (args.comp == "gcc"): f.write("COMP = GCC\n")
elif (args.comp == "clang"): f.write("COMP = CLANG\n")
elif (args.comp == "intel"): f.write("COMP = INTEL\n")
message("Comp-Type", str(args.comp))
shellmessage("Comp-Version",args.comp+" --version")
shellmessage("Comp-MPI","mpicxx -cxx="+args.comp+" -show")
f.write("CC = mpicxx -cxx="+args.comp+"\n")
if args.comp == 'g++':     
    f.write("MPI_LIB = -lgfortran -lmpich\n")
    f.write("CXX_COMPILE_FLAGS += -Wpedantic\n")
    if args.debug: f.write("CXX_COMPILE_FLAGS += -ggdb -g3\n")
    else:          f.write("CXX_COMPILE_FLAGS += -O3 -flto\n")
if args.comp == 'clang++': 
    f.write("MPI_LIB = -lgfortran -lmpich\n")
    f.write("CXX_COMPILE_FLAGS += -Wpedantic\n")
    if args.debug: f.write("CXX_COMPILE_FLAGS += -ggdb -g3\n")
    else:          f.write("CXX_COMPILE_FLAGS += -O3\n")
if args.comp == 'icc':     
    f.write("MPI_LIB = -lifcore\n")
    if args.debug: f.write("CXX_COMPILE_FLAGS += -ggdb -g3\n")
    else:          f.write("CXX_COMPILE_FLAGS += -Ofast -ipo\n") # -inline-forceinline

#
# Python information
#
if args.python:
    if os.path.isdir("/usr/include/python"+str(args.python)+"/"):
        python_include_dir = "/usr/include/python"+str(args.python)+"/"
    elif os.path.isdir("/usr/include/python"+str(args.python)+"m/"):
        python_include_dir = "/usr/include/python"+str(args.python)+"m/"
    else:
        message("Py incl. dirs",' '.join(glob.glob(("/usr/include/python*"))))
        raise Exception(error("Python include directory does not exist. Version may be incorrect, or you may need to install using either" 
                        + code("sudo apt install python3-dev") + " or " + code("sudo apt install python-dev")))

    if ctypes.util.find_library("boost_python-py"+args.python.replace(".","")):
        python_boost_lib = "-lboost_python-py"+str(args.python).replace(".","")
    elif ctypes.util.find_library("boost_python3-py"+args.python.replace(".","")):
        python_boost_lib = "-lboost_python3-py"+str(args.python).replace(".","")
    else:
        raise Exception(error("Cannot find python boost lib. Install using " + code("sudo apt install libboost-python-dev")))
    
    f.write("PYTHON_INCLUDE = -I" + python_include_dir + '\n')
    f.write("PYTHON_LIB = " + python_boost_lib + '\n')
    f.write("CXX_COMPILE_FLAGS += -fPIC \n")
    message("Python","True")
    message("Pythin include dir:",python_include_dir)
    message("Pythin boost lib:",python_boost_lib)
    note("Be sure to add " + code("USE_COMPILE_PIC=True") + " to the AMReX GNUMakefile")

if args.diff:
    try: shellmessage("diff2html","diff2html --version")
    except: raise Exception(error("Cannot find diff2html. Install using " + code("npm install diff2html") + " or compile with " + code("--no-diff")))
    f.write(r'CXX_COMPILE_FLAGS += -DGIT_DIFF_OUTPUT=\"$(abspath .diff.html)\"'+'\n')
    f.write("DEP_EXTRA += .diff.html\n")
    f2.write(".diff.html: .FORCE\n")
    f2.write("\t-@rm -rf .diff.html\n")
    f2.write("\t-@diff2html -F .diff.html --hwt simba/diff-template.html --style side >/dev/null 2>/dev/null\n")


#
# Documentation check
#
if (args.docs):
    #Doxygen
    try: shellmessage("Doxygen","doxygen --version")
    except: print(color.red+ "Doxygen not installed - install using " + code("sudo apt install doxygen") )
    #GraphViz
    try: shellmessage("GraphViz","dot -V")
    except: print(color.red + "GraphViz not installed - install using " + code("sudo apt install graphviz"))
    #Sphinx
    try: shellmessage("Sphinx","sphinx-build --version")
    except: print(color.red + "Sphinx not installed - install using " + code("sudo apt install python-sphinx"))
    #Breathe
    try: import breathe; message("Breathe version",str(breathe.__version__))
    except: message("Breathe version", color.red + "Breathe not installed - install using " + code("pip install breathe"),False)
    #RTD
    try: import sphinx_rtd_theme; message("RTD Theme", str(sphinx_rtd_theme.__version__) + " (python 3)")
    except: message("RTD Theme", color.red + "RTD not installed - install using " + code("pip install sphinx_rtd_theme"),False)
    #M2R
    try: import m2r; message("M2R", str(m2r.__version__) + " (python 3)")
    except: message("M2R",color.red + "M2R not installed - install using " + code("pip install m2r"))

