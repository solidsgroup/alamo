#!/usr/bin/env python3
import argparse
import os
import re
import subprocess
import textwrap
import sys
import shutil
#import ctypes.util
import glob
import json
from pathlib import Path

#
# Configuration parameters, mainly to specify default values:
#

# This is the current Alamo-supported version of AMReX. 
amrex_current_version = "25.03"
# Required minimum mpich version - ignore unless using ASan
mpich_minimum_version = "0.0.0"
# Python versions
python_minimum_major = 3
python_minimum_minor = 5


python_version = str(sys.version_info.major) + "." + str(sys.version_info.minor)

class color:
    reset = "\033[0m"
    red   = "\033[31m"
    green   = "\033[32m"
    blue   = "\033[34m"
    lightgray = "\033[37m"
    lightblue   = "\033[94m"
    boldgray = "\033[1m\033[37m"
    boldgreen   = "\033[1m\033[32m"
    boldyellow   = "\033[1m\033[33m"
    boldred   = "\033[1m\033[31m"
    bggray = "\033[47m\033[30m"
    bglightgreen = "\033[30m\033[102m"
    bgdarkgray = "\033[30m\033[100m"

width = 20
def wrap(input_string,hanging=True,strcolor=""):
    if len(input_string) == 0: return
    pre = ""
    wrapper = textwrap.TextWrapper(width=70,)
    if not hanging: print(" "*width,end="")
    for line in wrapper.wrap(input_string):
        if line != "\n":
            print(pre + strcolor + line + color.reset)
            pre = "".ljust(width)
def warning(message):
    print(color.boldyellow + "WARNING".ljust(width) + color.reset,end="")
    wrap(message)
def error(message,printwrap=True):
    print(color.boldred + "ERROR".ljust(width) + color.reset,end="")
    if printwrap: wrap(message)
    else: print(message)
def code(code):
    return(color.bgdarkgray + color.green + code + color.reset);
def note(message):
    print(color.boldgray + "NOTE".ljust(width) + color.reset,end="")
    wrap(message)
def message(title,message="",wrap_message=True):
    print(color.boldgreen + title.ljust(width) + color.reset,end="")
    if wrap_message: wrap(message)
    else: print(message)
def shellmessage(title,cmd,env=None,message=None,hidecmd=False,cwd=None,shell=False):
    print(color.boldgreen + title.ljust(width) + color.reset, end="")
    if message and hidecmd:
        print(message)
    elif message and not hidecmd: 
        print(message)
        print(" "*width + code(cmd.ljust(width)))
    elif not message and not hidecmd:
        print(code(cmd))
    
    if not shell: cmd = cmd.split()
    p = subprocess.run(cmd,shell=shell,capture_output=True,cwd=cwd)

    wrap(p.stdout.decode('ascii').replace('\n',' '),hanging=hidecmd,strcolor=color.lightblue)
    wrap(p.stderr.decode('ascii').replace('\n',' '),hanging=hidecmd,strcolor=color.blue)
    try:
        p.check_returncode()
    except subprocess.CalledProcessError as e:
        error("Tried to execute")
        error(color.bgdarkgray + color.green + ' '.join(e.cmd) + color.reset,printwrap=False)
        error("but got the following error")
        print(color.red + e.stderr.decode('ascii') + color.reset)
        raise e
    return p

message("Python",python_version)
if sys.version_info.major < python_minimum_major or sys.version_info.minor < python_minimum_minor:
    raise Exception(error("You need Python {}.{} or greater".format(python_minimum_major,python_minimum_minor)))

parser = argparse.ArgumentParser(description='Configure ALAMO');
parser.add_argument('--dim', default=3, type=int, help='Spatial dimension [3]')
parser.add_argument('--comp', default="g++", help='Compiler. Options: [g++], clang++, icc')
parser.add_argument('--amrex', default=None, help='Path to AMReX installation []')
parser.add_argument('--build-amrex', dest="buildamrex",action='store_true',default=True, help='Download and build AMReX automatically')
parser.add_argument('--build-amrex-fork', dest="amrexfork",action='store_true',default="AMReX-Codes", help='Download and build AMReX automatically')
parser.add_argument('--build-amrex-branch',dest="buildamrexbranch",default=None, help='AMReX Branch (You probably don\'t need to change this!)' )
parser.add_argument('--build-amrex-tag',dest="buildamrextag",default=None, help='AMReX Branch (You probably don\'t need to change this!)' )
parser.add_argument('--eigen', default="", help='Path to Eigen installation []')
parser.add_argument('--get-eigen', dest="geteigen",action='store_true',default=False, help='Download Eigen automatically')
parser.add_argument('--debug', dest='debug', action='store_true', help='Compile in debug mode')
parser.add_argument('--no-debug', dest='debug', action='store_false', help='[Compile in production mode]')
parser.add_argument('--offline', dest='offline', action='store_true',default=False, help='[Compile in production mode]')
parser.add_argument('--omp', dest='omp', action='store_true',default=False, help='Compile with OpenMP')
parser.add_argument('--docs',dest='docs',action='store_true',help='Check installation of packages for building documentation')
parser.add_argument('--diff',dest='diff',default=False,action='store_true',help='Use diff2html to generate git diff reports')
parser.add_argument('--macos',dest='macos',default=False,action='store_true',help='Compile without libpng (currently needed for macos)')
parser.add_argument('--profile',dest='profile',action='store_true',default=False,help="Enable tiny profiling in AMReX")
parser.add_argument('--coverage',dest='coverage',action='store_true',default=False,help="Enable test coverage with gcov")
parser.add_argument('--memcheck',dest='memcheck',action='store_true',default=False,help="Use memory checking")
parser.add_argument('--memcheck-tool',dest='memcheck_tool',default="msan",help="Memory checking toolL MSan (default) or ASan")
parser.add_argument('--create-gfortran-link',dest='gfortranln',action='store_true',default=False,
                    help="Create a link to the gfortran library. (Unless you are CircleCI, you should probably not do this!)")
parser.add_argument('--link',default=None, nargs='+', help='Additional link paths')
parser.add_argument('--no-comp-cmds',dest='compile_commands',default=False,action='store_true', help='Suppress generation of compile_commands.json for language servers like clangd')
parser.add_argument('--verbose',default=False,action='store_true',help="Show full make commands - useful if encountering compile/link errors")
parser.add_argument('--fft',default=False,action='store_true',help="Compile with fftw3")
parser.set_defaults(debug=False)

#
# Logic to ensure compatibility of command line arguments.
#

args=parser.parse_args()
if args.buildamrexbranch and args.buildamrextag:
    raise(Exception(error("You cannot specify build-amrex-tag and build-amrex-branch at the same time")))
if args.memcheck and not args.debug: 
    raise(Exception(error("To use memcheck you must also add the --debug flag")))
if args.memcheck and args.coverage: 
    raise(Exception(error("Cannot run memcheck and coverage at the same time currently")))
if args.memcheck and args.memcheck_tool == "msan" and not args.comp=="clang++":
    raise(Exception(error("MSan only works with clang, use --comp=clang++")))

#
# Update default arguments version numbers (etc.) based on command line arguments
#

# update amrex branch if needed
if not (args.buildamrexbranch or args.buildamrextag):
    args.buildamrextag = amrex_current_version
# if using WSan, a minimum verion is required for MPICH.
if args.memcheck and args.memcheck_tool == "asan":
    asan_mpich_minimum_version = "4.2.0"
    newversion = [str(max(int(a),int(b))) for a,b in zip(mpich_minimum_version.split('.'), asan_mpich_minimum_version.split('.'))]
    mpich_minimum_version = '.'.join(newversion)
    print(mpich_minimum_version)


subprocess.run(['mkdir','-p','.make'])
f = open(".make/Makefile.pre.conf","w")
f2 = open(".make/Makefile.post.conf","w")

#
# Specify verbosity of Makefile
#
if args.verbose:
    f.write("QUIET = \n")

#
# Specify Postfix
#
postfix = ""
postfix += str(args.dim)+"d"
if args.debug: postfix += "-debug"
if args.memcheck:
    if args.memcheck_tool == "asan": postfix += "-asan"
    if args.memcheck_tool == "msan": postfix += "-msan"
if args.profile: postfix += "-profile"
if args.coverage: postfix += "-coverage"
postfix += "-" + args.comp
f.write("POSTFIX = " + postfix + '\n')

#
# Current Repo settings
#
shellmessage("Current Branch", "git rev-parse --abbrev-ref HEAD", hidecmd=True)
shellmessage("Current Hash",   "git log -1 --pretty=format:%H", hidecmd=True)

#
# DIMENSION
#
f.write("DIM = " + str(args.dim) + "\n")
message("Dimension",str(args.dim))

#
# COMPILER
#

#
# DEBUG
#
f.write("DEBUG = " + str(args.debug) + "\n")
message("Debug Mode",str(args.debug))

#
# OpenMP
#
message("OpenMP",str(args.omp))
if args.omp:
    f.write("CXX_COMPILE_FLAGS += -DOMP -fopenmp \n")
    f.write("LINKER_FLAGS += -lgomp \n")

#
# AMREX
#
if args.buildamrex and not args.amrex:
    if not os.path.isdir("ext"): 
        shellmessage("Make ext",'mkdir -p ext')
    if not os.path.isdir("ext/amrex"):
        if args.offline:
            raise Exception(error("Cannot download AMReX and no version currently exists!"))
        if args.buildamrexbranch:
            shellmessage("AMReX-Clone",
                            cmd = "git clone https://github.com/AMReX-Codes/amrex.git --branch " + args.buildamrexbranch,
                            message="Cloning AMReX branch " + args.buildamrexbranch + " -- This may take a while",
                            cwd="ext/")
        else: shellmessage("AMReX-Clone", 
                            cmd="git clone https://github.com/AMReX-Codes/amrex.git",
                            message="Cloning AMReX [default branch] -- This may take a while",
                            cwd="ext/")
    elif not args.offline:
        shellmessage("AMReX-Update",cmd="git -C ext/amrex fetch --all")
        #p = subprocess.Popen("".split(),stdout=subprocess.PIPE,stderr=subprocess.PIPE)

    
    if not args.offline:
        try:
            if args.buildamrextag:
                shellmessage("AMReX-Checkout",
                                cmd="git -c advice.detachedHead=false -C ext/amrex checkout "+args.buildamrextag)
            elif args.buildamrexbranch:
                shellmessage("AMReX-Checkout",
                                cmd="git -c advice.detachedHead=false -C ext/amrex checkout "+args.buildamrexbranch)
            else:
                shellmessage("AMReX-Checkout",
                                cmd="git -C ext/amrex pull")
        except Exception as e:
            error("There was an error updating AMReX. It often helps to run")
            error(color.bgdarkgray+color.green+"make realclean"+color.reset)
            raise e
            
    else:
        message("AMReX","In offline mode, using existing version of AMReX")
    

    amrexdescribe = ""
    for cmd, desc in zip(["git describe --always --dirty", "git log -1 --pretty=format:%H"], ["AMReX-Describe","AMReX-Hash"]):
        ret = subprocess.run(cmd.split(' '),cwd="ext/amrex/",stderr=subprocess.PIPE,stdout=subprocess.PIPE)
        if not ret.returncode:
            message(desc, ret.stdout.decode())
        else:
            raise Exception(error()+" Problem getting AMReX log - "+ret.stderr.decode())
        if desc == "AMReX-Describe":
            amrexdescribe = ret.stdout.decode().replace('\n','').replace(' ','')
    
    postfix_amrex = postfix+"-"+amrexdescribe
    
    args.amrex = "ext/amrex/"+postfix_amrex
    f.write("AMREX = ext/amrex/" + postfix_amrex + "/\n")
    f.write("AMREX_TARGET = ext/amrex/" + postfix_amrex + "\n")
    f.write('AMREX_SRC := $(shell find ext/amrex/Src -name "*.H") $(shell find ext/amrex/Src -name "*.cpp")' + "\n")
    
    amrex_configure = './configure '
    amrex_configure += ' --dim=' + str(args.dim)
    amrex_configure += ' --prefix=' + postfix_amrex
    if   args.comp == "g++":     amrex_configure += ' --comp=gnu'
    elif args.comp == "clang++": amrex_configure += ' --comp=llvm --allow-different-compiler=yes '
    elif args.comp == "icc":     amrex_configure += ' --comp=intel'
    if args.debug: amrex_configure += ' --debug=yes'
    if args.profile: amrex_configure += ' --enable-tiny-profile=yes'
    
    if args.fft: amrex_configure += " --enable-fft=yes"

    message("AMReX-Configure",amrex_configure,False)
    subprocess.Popen(amrex_configure.split(),cwd="ext/amrex")
    
    f2.write("ext/amrex/"+postfix_amrex+": ${AMREX_SRC}\n")
    f2.write("\t$(MAKE) -C ext/amrex $(MAKECMD)\n") # --output-sync=target
    f2.write("\t$(MAKE) -C ext/amrex install\n")
    f2.write("\ttouch $@\n") # update directory timestamp to prevent build every time
        
    if not args.offline:
        message("AMReX-Status", "Downloading/building automatically")
    else:        
        message("AMReX-Status", "Using pre-downloaded version")
    message("AMReX-Directory", "ext/amrex/"+postfix_amrex)


            
elif (args.amrex != ""):
    # Check to make sure directory is valid 
    if not (os.path.isdir(args.amrex + "/include") and os.path.isdir(args.amrex + "/lib")):
        raise Exception(error(" AMReX directory must contain include/ and lib/ subdirectories "))

    # Scan AMReX Config File
    amrex_spacedim = 0
    amrex_profiling = False
    amrex_debug = False
    amrex_omp = False
    for line in open(args.amrex + "/include/AMReX_Config.H"):
        if "define BL_SPACEDIM 1" in line or "define AMREX_SPACEDIM 1" in line: amrex_spacedim = 1
        if "define BL_SPACEDIM 2" in line or "define AMREX_SPACEDIM 2" in line: amrex_spacedim = 2
        if "define BL_SPACEDIM 3" in line or "define AMREX_SPACEDIM 3" in line: amrex_spacedim = 3
        if "AMREX_DEBUG 1" in line: amrex_debug = True
        if "USE_OMP 1" in line: amrex_omp = True
        if "PROFILING 1" in line: amrex_profiling = True
        githash = line.replace("#define AMREX_GIT_VERSION ","").replace('"','').replace('\n','') if "AMREX_GIT_VERSION" in line else None
        
        
    if args.dim != amrex_spacedim:
        raise Exception(error()+"AMReX was compiled using a different spatial dimension (AMREX_SPACEDIM="+str(amrex_spacedim)+")")
    if args.debug != amrex_debug:
        if args.debug:
            raise Exception(error()+"Alamo is in debug mode but AMReX is not")
        else:
            raise Exception(error()+": Alamo is not in debug mode but AMReX is")
    if not args.debug and amrex_profiling:
        warning("Alamo compiled in production mode, but PROFILE is enabled in AMReX")
    if args.omp and not amrex_omp:
        raise Exception(error() + "Alamo is compiled with OMP but AMReX is not. Try compiling AMReX with "+code("./configure --with-omp=yes") + " or compile Alamo without "+code("--omp"))
    if not args.omp and amrex_omp:
        raise Exception(error() + "Alamo is compiled without OMP but AMReX is. Try compiling AMReX with "+code("./configure --with-omp=no") + " or compile Alamo with " + code("--omp"))

    message("AMReX Directory", args.amrex)
    if githash: message("AMReX Git commit", githash)
    f.write("AMREX = " + args.amrex + "\n")
else:
    warning("AMReX path not specified. This may cause compile errors.")

#
# EIGEN
#
if (args.geteigen):
    if not os.path.isdir("ext"): subprocess.run(['mkdir','-p','ext'])
    if not os.path.isdir("ext/eigen3"):
        message("Eigen-Clone","Cloning Eigen -- This may take a few moments",True)
        #p = subprocess.Popen(("git clone git@github.com:eigenteam/eigen-git-mirror.git eigen3").split(),
        p = subprocess.Popen(("git clone https://gitlab.com/libeigen/eigen.git eigen3").split(),
                             stderr=subprocess.PIPE,stdout=subprocess.PIPE,cwd="ext/")
        for line in iter(p.stderr.readline,b''): print (''.ljust(width)+ color.red + "ERR " + line.decode('ascii').replace('\n',''))
        for line in iter(p.stdout.readline,b''): print (''.ljust(width)+ "OUT " + line.decode('ascii').replace('\n',''))
        #subprocess.run("mv eigen-git-mirror eigen3".split())
    message("Eigen-Directory","ext/")
    f.write("EIGEN = ./ext/\n")
elif (args.eigen != ""):
    if not os.path.isdir(args.eigen + "/eigen3"):
        raise Exception(color.red+"ERROR"+color.reset+": Eigen directory must contain eigen3 subdirectory")
    message("Eigen-Directory",args.eigen)
    f.write("EIGEN = " + args.eigen + "\n")


#
# MAC OS SUPPORT
#
if args.macos:
    #f.write("ALAMO_INCLUDE += -DALAMO_NOPNG\n")
    f.write("ALAMO_INCLUDE += -DALAMO_SINGLE_DEFINITION=AMREX_FORCE_INLINE\n")
#else:
f.write("LIB += -lpng \n")

#
# ADD ADDITIONAL LINK LIBRARIES
#
if args.link:
    for l in args.link:
        f.write("LIB += -L" + l + "\n")
    
#
# CHECK COMPILER AND SET OPTIONS
#
if   (args.comp == "g++"):     f.write("COMP = GCC\n")
elif (args.comp == "clang++"): f.write("COMP = CLANG\n")
elif (args.comp == "icc"):     f.write("COMP = INTEL\n")
else: raise Exception(color.red + "ERROR" + color.reset + ": Compiler must be g++, clang++, or icc")
message("Comp-Type", str(args.comp))
shellmessage("Comp-Version",args.comp+" --version")


#
# CHECK MPI DISTRIBUTION AND SET OPTIONS
#

p = shellmessage("MPI","mpicxx -show")
mpidiststr = p.stdout.decode('utf-8').replace('\n','')

mpidist = None
if "mpich" in mpidiststr.lower():
    mpidist = "mpich"
elif "mvapich2" in mpidiststr.lower():
    mpidist = "mvapich2"
elif "mvapich" in mpidiststr.lower():
    mpidist = "mvapich"
elif "openmpi" in mpidiststr.lower():
    mpidist = "openmpi"
message("mpi implementation", mpidist)

if mpidist == "openmpi":
    compmpicmd = shellmessage("openmpi comp flags", "mpicxx --showme:compiler").stdout.decode('utf-8').replace('\n','')
    compmpicmd = args.comp + " " + compmpicmd
    shellmessage("openmpi c++ link"   , "mpicxx --showme:link".format(args.comp))
    shellmessage("openmpi fort link"   , "mpifort --showme:link".format(args.comp))
    shellmessage("openmpi version", "mpicxx --showme:version")
    env = os.environ.copy()
    env.update({'OMPI_CXX': args.comp})

    mpicomp = shellmessage("openmpi cxx default", "mpicxx --showme:command").stdout.decode('utf-8').replace('\n','')
    ompicc = f"export OMPI_CXX={args.comp} && mpicxx"
    shellmessage("openmpi cxx used",f"{ompicc} --version",shell=True)
    f.write(f"CC = {ompicc} \n")

    p = shellmessage("openmpi mpiexec", "mpiexec --version")
    pexecversion = p.stdout.decode('utf-8').replace('\n','').lower()

    if ("openmpi" not in pexecversion and
        "open mpi" not in pexecversion and
        "openrte" not in pexecversion and
        "open-mpi" not in pexecversion):
        warning("Your mpiexec seems inconsistent with your mpicxx!!!")
    if ("mpich" in pexecversion):
        error("In fact, it seems as though your mpiexec is part of mpich "+
              "instead of openmpi. Please fix before attempting to run.")

elif mpidist == "mpich":
    if not shutil.which("mpichversion"):
        raise Exception(color.red + "ERROR" + color.reset +
            ": An MPICH or MVAPICH installation was not found, to compile "+
            "with another MPI library please use " +
            code("--alternate-mpi"))
    compmpicmd = shellmessage("mpich comp","mpicxx -cxx="+args.comp+" -show").stdout.decode('utf-8').replace('\n','')
    mpichversionresult = shellmessage("MPICH:","mpichversion")
    if args.memcheck_tool=="asan":
        version_match_str = re.search(r"MPICH Version:\s*([\d.]+)", mpichversionresult.stdout.decode('ascii')).group(1)
        version = [int(a) for a in version_match_str.split('.')]
        minimum_version = [int(a) for a in mpich_minimum_version.split('.')]
        if version<minimum_version:
            raise Exception(error("MPICH version {} is less than required version {}".format(version_match_str, mpich_minimum_version)))
        
    shellmessage("mpich mpicxx:","mpicxx -v")
    f.write("CC = mpicxx -cxx="+args.comp+"\n")
    f.write("MPI_LIB = -lmpich\n")

    p = shellmessage("mpich mpiexec", "mpiexec --version")
    if "mpich" not in p.stdout.decode('utf-8').replace('\n',''):
        warning("Your mpiexec seems inconsistent with your mpicxx!!!")
else:
    f.write("CC = mpicxx -cxx="+args.comp+"\n")
    f.write("MPI_LIB = -lmpich\n")
    warning("We haven't tested "+mpidist+" yet. Attempting to add the proper compile " +
            "flags but no guarantees.")


#
# ADD NECESSARY COMPILER-SPECIFIC MPI FLAGS
#   note: this must come after the MPI section, otherwise the order of
#         flags may cause linker to fail!
#
if args.comp == 'g++':
    f.write("MPI_LIB += -lgfortran\n")
    f.write("CXX_COMPILE_FLAGS += -Wpedantic\n")
    if args.coverage: f.write("LINKER_FLAGS += -fprofile-arcs\n")
    if args.memcheck:
        if args.memcheck_tool=="asan":
            f.write("CXX_COMPILE_FLAGS += -fsanitize=address -fno-omit-frame-pointer -fsanitize-address-use-after-scope\n")
            f.write("LINKER_FLAGS += -fsanitize=address -static-libasan\n")
        elif args.memcheck_tool=="msan":
            f.write("CXX_COMPILE_FLAGS += -fsanitize=memory -fno-omit-frame-pointer\n")
            f.write("LINKER_FLAGS += -fsanitize=memory\n")
        else:
            error("Invalid memory check tool ", args.memcheck_tool)
    if args.coverage and args.debug: f.write("CXX_COMPILE_FLAGS += -ggdb -g3 -fprofile-arcs -ftest-coverage\n")
    elif args.debug:                 f.write("CXX_COMPILE_FLAGS += -ggdb -g3\n")
    elif args.coverage:              f.write("CXX_COMPILE_FLAGS += -fprofile-arcs -ftest-coverage\n")
    else:                            f.write("CXX_COMPILE_FLAGS += -O3 -flto\n")
if args.comp == 'clang++':
    f.write("MPI_LIB += -lgfortran\n")
    f.write("CXX_COMPILE_FLAGS += -Wpedantic\n")
    if args.debug: f.write("CXX_COMPILE_FLAGS += -ggdb -g3\n")
    else:          f.write("CXX_COMPILE_FLAGS += -O3\n")
if args.comp == 'icc':
    f.write("MPI_LIB += -lifcore\n")
    if args.debug: f.write("CXX_COMPILE_FLAGS += -ggdb -g3\n")
    else:          f.write("CXX_COMPILE_FLAGS += -Ofast -ipo\n") # 

if args.fft:
    f.write("MPI_LIB += -lfftw3 -lfftw3f\n")
    f.write("CXX_COMPILE_FLAGS += -DALAMO_FFT\n")

#
# DIFF
#
if args.diff:
    try: shellmessage("diff2html","diff2html --version")
    except: raise Exception(error("Cannot find diff2html. Install using " + code("npm install diff2html")))
    f.write(r'CXX_COMPILE_FLAGS += -DGIT_DIFF_OUTPUT=\"$(abspath .diff/{}.diff.html)\"'.format(postfix)+'\n')
    f.write("DEP_DIFF += .diff/{}.diff.html\n".format(postfix))
    f2.write(".diff/{}.diff.html: .FORCE\n".format(postfix))
    f2.write("\t-@mkdir -p .diff\n".format(postfix))
    f2.write("\t-@rm -rf .diff/{}.diff.html\n".format(postfix))
    f2.write("\t-@diff2html -F .diff/{}.diff.html --hwt .simba/diff-template.html --output stdout --style side >/dev/null 2>/dev/null\n".format(postfix))

f.write( f'CXX_COMPILE_FLAGS += -DGIT_DIFF_PATCH_OUTPUT=\\"$(abspath .diff/{format(postfix)}.diff.patch)\\"\n')
f.write( f"DEP_DIFF += .diff/{format(postfix)}.diff.patch\n")

f2.write(f".diff/{format(postfix)}.diff.patch: .FORCE\n")
f2.write(f"\t@mkdir -p .diff\n")
f2.write(f"\t@rm -rf .diff/{format(postfix)}.diff.patch\n")
f2.write(f"\t@if ! git diff --quiet; then \\\n")
f2.write(f"\t   echo '$(B_ON)$(FG_MAGENTA)DIFF$(RESET)            ==>   $(FG_MAGENTA)$@$(RESET)';\\\n")
f2.write(f"\t fi\n")
f2.write(f"\t$(QUIET)git diff > $@\n")

#
# Documentation check
#
if (args.docs):
    #Doxygen
    try: shellmessage("Doxygen","doxygen --version")
    except: print(color.red+ "Doxygen not installed - install using " + code("sudo apt install doxygen") )
    #GraphViz
    try: shellmessage("GraphViz","dot -V")
    except: print(color.red + "GraphViz not installed - install using " + code("sudo apt install graphviz"))
    #Sphinx
    try: shellmessage("Sphinx","sphinx-build --version")
    except: print(color.red + "Sphinx not installed - install using " + code("sudo apt install python-sphinx"))
    #Breathe
    try: import breathe; message("Breathe version",str(breathe.__version__))
    except: message("Breathe version", color.red + "Breathe not installed - install using " + code("pip install breathe"),False)
    #RTD
    try: import sphinx_rtd_theme; message("RTD Theme", str(sphinx_rtd_theme.__version__) + " (python 3)")
    except: message("RTD Theme", color.red + "RTD not installed - install using " + code("pip install sphinx_rtd_theme"),False)
    #M2R
    try: import m2r; message("M2R", str(m2r.__version__) + " (python 3)")
    except: message("M2R",color.red + "M2R not installed - install using " + code("pip install m2r"))


if not args.compile_commands:
    srcfiles = set()
    for dirname, _, filelist in sorted(os.walk("src/")):
        for f in filelist:
            if f.endswith(".cc"): srcfiles.add(dirname+"/"+f)
            if f.endswith(".cpp"): srcfiles.add(dirname+"/"+f)
            if f.endswith(".H"): srcfiles.add(dirname+"/"+f)
    srcfiles = list(srcfiles)

    projectdir = os.getcwd()

    otherflags = ""
    if args.fft: otherflags += "-DALAMO_FFT"

    cc = compmpicmd
    command_objects = []
    command_objects = [{
        "directory": projectdir,
        "file": srcfile,
        "arguments": [
            *cc.split(" "),
            *otherflags.split(" "),
            "-std=c++17",
            "-I./src/",
            srcfile,
            f"-I./ext/amrex/{postfix_amrex}/include",
        ],
    } for srcfile in srcfiles]

    with open(Path("compile_commands.json"), "w") as f:
        json.dump(command_objects, f, indent=4)

